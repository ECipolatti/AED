# Ejercicios listas y maps

**Instrucciones:** Se incluye un archivo Evaluar.hpp que tiene una clase llamada Evaluar dentro del namespace aed. Esta clase tiene 4 métodos que se pueden utilizar para autoevaluar los ejercicios. Los nombres de los métodos son evaluar1, evaluar2, ..., evaluar4 para los ejercicios 1, 2, ..., 4 respectivamente. Cada una recibe un parámetro, correspondiente a la función que resuelve el ejercicio. Dicha función se indica en cada ejercicio.

Un ejemplo de uso para evaluar todos los ejercicios es:

~~~
#include "Evaluar.hpp"
using namespace aed;
int main()
{
	aed::Evaluar ev;
	ev.evaluar1(acum_hasta);
	ev.evaluar2(colas);
	ev.evaluar3(checkmap);
	ev.evaluar4(printmap);

	return 0;
}
~~~

En un principio puedes comentar los ejercicios que no quieras evaluar o no hayas resuelto aún.

Para asegurar que todo compile y se ejecute correctamente, si se utiliza zinjai, se recomienda crear un proyecto, y en él incluir Evaluar.hpp, además de tener este archivo en la misma carpeta que tu main.

##################################
## Ejercicio 1
##################################
Escriba una función void acum_hasta(list<int> \&L, int n) que dada una lista de enteros L, y un entero n, modificar la lista in-place de manera que todos los elementos de la lista sean mayores o iguales a n. La forma de hacerlo es ir acumulando valores consecutivos de L hasta que dicha condición se cumpla, dejando la suma como elemento de la lista. Continuar hasta que todos los elementos de la lista cumplan la condición, con excepción, quizás, del último elemento.
=================================
Ejemplo:

L = [1, 3, 2, 1, 2]
n = 4

Lista resultante = [4, 5]

Procedimiento:
Si vamos acumulando los elementos consecutivamente, con los dos primeros ya llegamos a n (1+3).  A partir de ahí­, necesitamos los 3 elementos siguientes para llegar, ya que con los dos siguientes no alcanza.  
=================================
Ejemplo:

L = [3, 4, 2, 5, 1, 1]
n = 3
Lista resultante = [3, 4, 7, 2]

Procedimiento:
En este ejemplo los dos primeros valores de la lista cumplen la condición, así­ que se dejan tal cual. Luego sigue el 2, que es menor que n, entonces se continúa acumulando, al acumularlo con el 5, se obtiene 7 que cumple la condición, y se deja este número.  Quedan dos 1, que aunque no lleguen a la condición, se acumulan igual por ser los últimos restantes.  

##################################
## Ejercicio 2
##################################
Escribir una función:
list< list<int> > colas(list<int> &L)

Que devuelve una lista de listas de enteros, con todas las "colas" de L.
Sea una lista L = [l1, l2, ..., ln] definimos cola de una lista como una lista
Li = [lk, lk+1, ..., ln] con 1 <= k <= n.
=================================
Ejemplo:
L = [1, 2, 3]
La lista resultante debe ser:
L = [ [1, 2, 3], [2, 3], [3] ]

##################################
## Ejercicio 3
##################################

Dado un map<int, list<bool> > M, verificar que para
todas las claves pares, la lista correspondiente tenga todos
sus elementos en true o bien que sea vacia. Si el map no
tiene elementos, la salida debe ser true.
**Tomado en parcial de lab 2011-09-17**.
    

Ejemplos:
=================================
M = {2 -> [true, true], 4 ->[]} -> returns true
M = {1 -> [false]} -> returns true
M = {2 -> [true, true, true], 3 -> [true, false]} -> returns true
M = {} -> returns true
M = {6 -> [false, true], 4 -> [true, true]} -> returns false

La funcion debe tener la siguiente signatura 
bool mostrar_map(map<int, list<bool> >&)

##################################
## Ejercicio 4
##################################
Dado un map<int, list<int> > utilizar cout (se debe utilizar cout, no printf) para mostrar dicho map con el siguiente formato:

M = {0->[27, 42, 21, 6], 1->[], 2->[28, 40, 3, 3], 3->[], 4->[11, 12, 13, 36]}

Donde, para el ejemplo dado, el map tiene las keys {0, 1, 2, 3, 4} y con una flechita (->) se indica la lista correspondiente entre corchetes.
El formato debe ser tal cual, se deben respetar las comas y los espacios. NO se debe dejar un salto de línea al final (ni en ningún lugar), es decir, nunca deberían usar endl o '\n'.
Notar que las claves se indican en orden ascendiente, que corresponde al orden en que se obtienen iterando la clase map de la biblioteca estándar de C++.

La función debe tener la signatura:

void (*) (map<int, list<int> >&)

Es decir, podrían hacer la siguiente función:
void mostrar_map(map<int, list<int> >& M)
que muestra M con el formato indicado.